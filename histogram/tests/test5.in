#include <stdexcept>
#include <optional>
#include <map>
#include <memory>

template <typename Key1, typename Key2, typename Value>
class BiMap {
    std::map<Key1, std::shared_ptr<Value>> m1;
    std::map<Key2, std::shared_ptr<Value>> m2;
public:
    // Вставить значение, указав один или оба ключа.
    // Генерирует исключение std::invalid_argument("some text") в случае,
    // если оба ключа пусты, либо один из ключей уже имеется в хранилище.
    void Insert(const std::optional<Key1>& key1, const std::optional<Key2>& key2, const Value& value) {
        if ((!key1.has_value() && !key2.has_value()) ||
        (key1.has_value() && m1.contains(key1.value())) || (key2.has_value() && m2.contains(key2.value()))) {
            throw std::invalid_argument("some text");
        }
        auto s = std::shared_ptr<Value>(new Value(value));
        if (key1.has_value()) {
            m1[key1.value()] = s;
        }
        if (key2.has_value()) {
            m2[key2.value()] = s;
        }
    }

    // Получить значение по ключу первого типа.
    // Генерирует исключение std::out_of_range("some text")
    // в случае отсутствия ключа (как и функция at в std::map).
    Value& GetByPrimaryKey(const Key1& key) {
        if (!m1.contains(key)) {
            throw std::out_of_range("some text");
        }
        return *(m1[key]);
    }
    const Value& GetByPrimaryKey(const Key1& key) const {
        if (!m1.contains(key)) {
            throw std::out_of_range("some text");
        }
        return *(m1.at(key));
    }

    Value& GetBySecondaryKey(const Key2& key) {
        if (!m2.contains(key)) {
            throw std::out_of_range("some text");
        }
        return *(m2[key]);
    }
    const Value& GetBySecondaryKey(const Key2& key) const {
        if (!m2.contains(key)) {
            throw std::out_of_range("some text");
        }
        return *(m2.at(key));
    }
};

using namespace std;

struct Student {
    string Surname, Name;
};

ostream& operator << (ostream& out, const Student& s) {
    return out << s.Surname << " " << s.Name;
}

int main() {
    BiMap<int, string, Student> bimap;  // студента можно определить либо по номеру, либо по логину
    bimap.Insert(42, {}, {"Ivanov", "Ivan"});
    bimap.Insert({}, "cshse-ami-512", {"Petrov", "Petr"});
    bimap.Insert(13, "cshse-ami-999", {"Fedorov", "Fedor"});

    cout << bimap.GetByPrimaryKey(42) << "\n";  // Ivanov Ivan

    cout << bimap.GetBySecondaryKey("cshse-ami-512") << "\n";  // Petrov Petr

    cout << bimap.GetByPrimaryKey(13) << "\n";  // Fedorov Fedor
    cout << bimap.GetBySecondaryKey("cshse-ami-999") << "\n";  // Fedorov Fedor

    bimap.GetByPrimaryKey(13).Name = "Oleg";  // меняем значение по первичному ключу - по вторичному оно тоже должно измениться
    cout << bimap.GetByPrimaryKey(13) << "\n";  // Fedorov Oleg
    cout << bimap.GetBySecondaryKey("cshse-ami-999") << "\n";  // Fedorov Oleg
    return 0;
}
