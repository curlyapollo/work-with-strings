#include <exception>
#include <functional>
#include <optional>

template <typename Result, typename Exception = std::exception>
std::optional<Result> DoWithRetry(std::function<Result()> func,
                                  int retryCount, int sleepTime, bool throwLast) {
    auto counter = 0;
    do {
        try {
            auto s = func();
            return s;
        }
        catch (Exception e) {
            counter++;
            if (counter == retryCount + 1) {
                if (throwLast) {
                    throw std::move(e);
                }
                else
                    return std::optional<Result>();
            }
            Sleep(sleepTime);
        }
    } while (counter != retryCount + 1);
    return Result();
}
