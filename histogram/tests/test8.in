template<typename T>
class IntegrationMethod {
public:
    virtual double Integrate(T t, double a, double b, int pieces) = 0;
    virtual ~IntegrationMethod() {}
};

template<typename T>
class RectangleRule : public IntegrationMethod<T> {
    double Integrate(T t, double left, double right, int step) override {
        double sum = 0;
        for (int i = 0; i < step; ++i) {
            double x_i = left + (right - left) / step * i;
            double x_i1 = left + (right - left) / step * (i + 1);
            sum += t((x_i + x_i1) / 2) * (x_i1 - x_i);
        }
        return sum;
    }

};

template<typename T>
class TrapezoidalRule : public IntegrationMethod<T> {
    double Integrate(T t, double left, double right, int step) override {
        double sum = 0;
        for (int i = 0; i < step; ++i) {
            double x_i = left + (right - left) / step * i;
            double x_i1 = left + (right - left) / step * (i + 1);
            sum += (t(x_i) + t(x_i1)) / 2 * (x_i1 - x_i);
        }
        return sum;
    }

};

#include "quadrature.h"

#include <cmath>
#include <iostream>
#include <memory>
#include <string>

int main() {
    using F = decltype(cos);

    std::string input;
    std::cin >> input;
    std::unique_ptr<IntegrationMethod<F>> method;
    if (input == "rectangle")
        method.reset(new RectangleRule<F>);
    else
        method.reset(new TrapezoidalRule<F>);

    double x, y;
    std::cin >> x >> y;

    int n;
    std::cin >> n;
    std::cout << method->Integrate(cos, x, y, n) << "\n";
    std::cout << method->Integrate(sin, x, y, n) << "\n";
}
